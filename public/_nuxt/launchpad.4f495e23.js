import{_ as n,S as L,i as C,a as m,u as w,R as S,U as k,V as A}from"./pool.0a9aff1a.js";import{eY as I,f as g,K as T,e_ as O}from"./entry.cb6f389e.js";function h(t){const s={fullRpcUrl:n[t||"Sui"].rpcUrl,faucetURL:n[t||"Sui"].rpcUrl,networkOptions:{simulationAccount:{address:n[t||"Sui"].simulationAccount},token:{token_deployer:n[t||"Sui"].TokenDeployer,config:n[t||"Sui"].tokenConfig},launchpad:{ido:n[t||"Sui"].launchpad.ido,nft_lock:n[t||"Sui"].launchpad.nft_lock,config:n[t||"Sui"].launchpad.config},modules:{cetus_clmm:n[t||"Sui"].cetusClmm,cetus_integrate:n[t||"Sui"].cetusIntegrate,integer_mate:n[t||"Sui"].integerMate,config:{global_config_id:n[t||"Sui"].clmmConfig.global_config_id,pools_id:n[t||"Sui"].clmmConfig.pools_id}}}};console.log("defaultNetworkOptions####",s);const a=I(new L(s)),i=C(),d=g(()=>i),_=m();g(()=>_);const y=w(),f=g(()=>y);return T(()=>{d.value.address&&(a.senderAddress=d.value.address)}),{getMyCommittedCoinAsset:async(o,e)=>{const c=await a.Launchpad.getOwnerLaunchpadCoins(e,a.Launchpad.buildLaunchpadCoinType(o.coin_type_sale,o.coin_type_raise));return S.calculateTotalBalance(c).toString()},getLaunchpadAllPools:async()=>await a.Launchpad.getPools([]),getLaunchpadPoolInfo:async o=>await a.Launchpad.getPool(o),getJoinPools:async(o,e)=>{const c=e||await a.Launchpad.getPools(),u=await a.Launchpad.getOwnerLaunchpadCoins(o),l=[];return c.forEach(p=>{const P=a.Launchpad.buildLaunchpadCoinType(p.coin_type_sale,p.coin_type_raise);for(const r of u)if(r.coinAddress===P){l.push(p);break}}),l},getOwnerPools:async(o,e)=>{const c=e||await a.Launchpad.getPools(),u=[];return c.forEach(l=>{l.recipient===o&&u.push(l)}),u},getCreatPurchasePayload:async o=>({transactionBlock:await a.Launchpad.creatPurchasePayload({pool_address:o.pool.pool_address,purchase_amount:o.amount,coin_type_sale:o.pool.coin_type_sale,coin_type_raise:o.pool.coin_type_raise}),options:{showEffects:!0}}),getCreatClaimPayload:async o=>({transactionBlock:await a.Launchpad.creatClaimPayload({pool_address:o.pool.pool_address,amount_lp:o.amount_lp,coin_type_sale:o.pool.coin_type_sale,coin_type_raise:o.pool.coin_type_raise}),options:{showEffects:!0}}),getCreatSettlePayload:async o=>{let e=null,c=!1;const u=await a.Resources.getPoolImmutables();console.log(u,"===>clmmImmutables");for(const r of u){if(r.coinTypeA===o.coin_type_sale&&r.coinTypeB===o.coin_type_raise){e=await a.Resources.getPool(r.poolAddress),console.log("clmmPool: ",e);break}if(r.coinTypeA===o.coin_type_raise&&r.coinTypeB===o.coin_type_sale){e=await a.Resources.getPool(r.poolAddress),c=!0,console.log("clmmPool: ",e);break}}if(!e)return null;const l=k.priceToSqrtPriceX64(A(o.current_price),f.value.newTokenObj[o.coin_type_sale].decimals,f.value.newTokenObj[o.coin_type_raise].decimals).toString(),p=BigInt(l)<BigInt(e.current_sqrt_price);return{transactionBlock:await a.Launchpad.creatSettlePayload({pool_address:o.pool_address,coin_type_sale:o.coin_type_sale,coin_type_raise:o.coin_type_raise,recipient:o.recipient,initialize_sqrt_price:l,clmm_pool_address:e.poolAddress,a2b:p,opposite:c}),options:{showEffects:!0}}},getCreatWithdrawParams:async o=>({transactionBlock:a.Launchpad.creatWithdrawPayload({pool_address:o.pool.pool_address,coin_type_sale:o.pool.coin_type_sale,coin_type_raise:o.pool.coin_type_raise,sale_amount:o.sale_amount,raise_amount:o.raise_amount}),options:{showEffects:!0}}),getIsWhiteListUser:async(o,e)=>await a.Launchpad.isWhiteListUser(o.white_handle,e),getCreatUnlockNftPayload:async o=>{if(o.pool_status=="Ended"){const e=await a.Launchpad.getLockNFTEvent(o.pool_type,o.recipient);if(e)return{transactionBlock:a.Launchpad.creatUnlockNftPayload({lock_nft:e.lock_nft_id,nft_type:e.nft_type}),options:{showEffects:!0}}}else throw new Error("The pool is not in Ended  ")},getLockNFT:async o=>{if(o.pool_status=="Ended"){const e=await a.Launchpad.getLockNFTEvent(o.pool_type,o.recipient);if(console.log("lockNftEvent: ",e),e){const c=await a.Launchpad.getLockNFT(e.lock_nft_id);return console.log("lockNft: ",c),c}}return null},getIsAdminCap:async o=>await a.Launchpad.isAdminCap(o)}}const q=O("launchpad",{state:()=>({currentLaunchpadPoolInfo:{},launchpadAllPools:[],launchpadOwnerAllPools:[],launchpadJoinPools:[],haveLaunchpad:!1,launchpadPoolsLoading:!0,getOwnDateLoading:!0,ownIsWhiteList:!1,committedCoinAssetSdk:"0",committedCoinAssetCount:"0",myPurchaseSdk:"",currentPoolNumData:{},idoCountTotalPoolData:{},idoCountCurrentPoolData:{},idoCountOwnData:{},idoPoolConfigInfo:{},currentTab:"latest"}),actions:{async setGetOwnDateLoading(t){this.getOwnDateLoading=t},async setCurrentLaunchpadPoolInfo(t){this.currentLaunchpadPoolInfo=t},async setCurrentTab(t){this.currentTab=t},async setCurrentPoolNumData(t){this.currentPoolNumData=t},async setMyPurchaseSdk(t){this.myPurchaseSdk=t},async setOwnIsWhiteList(t){this.ownIsWhiteList=t},async setMyCommittedCoinAsset(t){this.committedCoinAssetSdk=t},async setMyCountCommittedCoinAsset(t){this.committedCoinAssetCount=t},async setLaunchpadPoolsLoading(t){this.launchpadPoolsLoading=t},async setLaunchpadAllPools(){this.launchpadAllPools=[],this.setLaunchpadPoolsLoading(!0);const s=await h("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=s.sort((a,i)=>i.activity_start_time-a.activity_start_time),this.setLaunchpadPoolsLoading(!1),console.log("launchpadAllPoolsListlaunchpadAllPoolsList",s)},async getCurrentLaunchpadPoolInfo(t,s){this.currentLaunchpadPoolInfo={};const i=await h("Sui").getLaunchpadPoolInfo(t)||{};this.setLaunchpadPoolsLoading(!1),this.setGetOwnDateLoading(!1),this.currentLaunchpadPoolInfo={...i,cmmPoolInfo:{}},console.log("currentLaunchpadPoolInfo",this.currentLaunchpadPoolInfo)},async setLaunchpadJoinPools(t){this.setLaunchpadPoolsLoading(!0);const a=await h("Sui").getJoinPools(t)||[];a.length<1?this.setLaunchpadPoolsLoading(!1):(this.setLaunchpadPoolsLoading(!1),this.launchpadJoinPools=a.sort((i,d)=>d.activity_start_time-i.activity_start_time),console.log("launchpadJoinPoolsListresultresultresult111",a))},async setLaunchpadOwnerAllPools(t,s){this.setLaunchpadPoolsLoading(!0);const i=await h("Sui").getOwnerPools(t,s)||[];i.length<1?(this.setLaunchpadPoolsLoading(!1),this.haveLaunchpad=!1):(this.setLaunchpadPoolsLoading(!1),this.haveLaunchpad=!0,this.launchpadOwnerAllPools=i.sort((d,_)=>_.activity_start_time-d.activity_start_time),console.log("resultresultresult111",i))},async setIdoPoolTotalData(){await $fetch(`${n.Sui.api}/v2/sui/ido/total/count`)},async setCurrentIdoPoolData(t){const s=await $fetch(`${n.Sui.api}/v2/sui/ido/pool/count/${t}`);console.log(s,"resres"),this.idoCountCurrentPoolData=s.data||{}},async getIdoOwnPoolTotalData(t,s){const a=await $fetch(`${n.Sui.api}/v2/sui/ido/user/count/${t}/${s}`);return this.idoCountOwnData=a.data||{},a.data},async setIdoOwnCountPoolData(t){this.idoCountOwnData=t},async getIdoPoolConfigInfo(){const t=await $fetch(`${n.Sui.api}/sui/ido/config`);return console.log(t,t.data,"resres"),this.idoPoolConfigInfo=t.data||{},t.data}}});export{h as a,q as u};
